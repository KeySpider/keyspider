<?php

namespace Tests\Feature;

use App\Ldaplibs\SCIM\SCIMToSalesforce;
use bjsmasth\Salesforce\Authentication\PasswordAuthentication;
use Faker\Factory;
use Illuminate\Support\Facades\Config;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;


/**
 * @property  scimLib
 */
class TestSalesForceViaSCIM extends TestCase
{
    public $scimLib;
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function setUp()
    {

        parent::setUp(); // TODO: Change the autogenerated stub
/*        $options = [
            'grant_type' => 'password',
//            'client_id' => '3MVG9n_HvETGhr3CdmqWTiR77Q_qn8pnO8XeKx1p6Pu7C_5Mz3nCRHDlKUHHReVrmJM1gTjDBhKS.wkrQrPhf',
            'client_id' => '3MVG9G9pzCUSkzZtQhmyLq3TUSdPdWhKaUzMAr3Gyr73oUK4Kxf.JIjEt1t_Y8l4SAoHfoiH2GTsnc8WR8JX7',
//            'client_secret' => '27530A5695008D8D6B064EE431B8EEA63FE7D8566E8525964286D5B45313C513',
            'client_secret' => 'F7F54A0096F01D6F7992DC7D4BEBF14599E0F6554FDCCCEB1987BC498D554E16',
            'username' => 'vntuanla@gmail.com',
            'password' => '1qs2wd3efVU8iz0SQY8Wml7bFWtAZUW1bI'
        ];

        $salesforce = new PasswordAuthentication($options);
//        $salesforce = new bjsmasth\Salesforce\Authentication\PasswordAuthentication($options);
        $salesforce->authenticate();

        $access_token = $salesforce->getAccessToken();
        $instance_url = $salesforce->getInstanceUrl();
        var_dump($access_token);

        $query = 'SELECT Id,Name FROM USER LIMIT 10';

        $this->crud = new \bjsmasth\Salesforce\CRUD();*/

        $this->scimLib = new SCIMToSalesforce();

    }

    public function testCreateUser()
    {
        $faker = Factory::create();
        for($i=0;$i<1;$i++) {
            $data = json_decode(Config::get('schemas.createUser'), true);
            $email = $faker->email;
            $data['userName'] = $email;
            $data['Email'] = $email;
            $data['Alias'] = $faker->countryCode;
            $data['LastName'] = $faker->lastName;
            echo($this->scimLib->createUserWithData($data));
        }
    }
    public function testCreateGroup()
    {
        $faker = Factory::create();
        echo($this->scimLib->createGroupWithData(['Name'=>$faker->company]));

    }

    public function testGetUsersList(){
        dd($this->scimLib->getUsersList());
    }
    public function testGetGroupsList(){
        dd($this->scimLib->getGroupsList());
    }

    public function testGetDetail(){
//        dd($this->scimLib->getUser('0052v00000gjmlTAAQ'));
        dd($this->scimLib->getGroup('00G2v000004W30vEAC'));
    }

    public function testEditGroup(){
//        dd($this->scimLib->getUser('0052v00000gjmlTAAQ'));
        dd($this->scimLib->updateResource('Group', '00G2v000004W30vEAC', ['GroupName'=>'Hehe']));
    }

    public function testAddMemberToGroup(){
        $this->scimLib->addMemberToGroup('0052v00000gk2UEAAY', '00G2v000004W30vEAC');
    }
/**
     * @param string $userName
     * @param \bjsmasth\Salesforce\CRUD $crud
     */
    private function createUserWithData(array $data=null)
    {
        if($data == null)
        $data = [
            'userName' => 'tiger@nal.vn', //This is the KEY
            'Email' => 'tiger@nal.vn',
            'Alias' => 'tiger',
            'TimeZoneSidKey' => 'Asia/Ho_Chi_Minh',
            'LocaleSidKey' => 'en_GB',
            'EmailEncodingKey' => 'UTF-8',
            'LanguageLocaleKey' => 'ja',
            'LastName' => 'Le Quang',
            'ProfileId' => '00e2v000002jQTS',
//'Name'=>'2020'
        ];

        try{
            return $this->crud->create('USER', $data);  #returns id
        }
        catch (\Exception $exception){
            echo ($exception->getMessage());
            return -1;
        }
    }

    public function testUpdateResource(){
//        $this->scimLib
    }
}
