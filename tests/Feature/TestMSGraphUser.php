<?php

namespace Tests\Feature;

use Faker\Factory;
use Illuminate\Support\Facades\Config;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Model\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TestMSGraphUser extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    private $accessToken;
    private $graph;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $tenantId = 'd40093bb-a186-4f71-8331-36cca3f165f8';
        $clientId = 'eb827075-42c3-4d23-8df0-ec135b46b5a6';
        $clientSecret = 'BtnF@kN3.?k.HA3raQBMasXiVOM3dNN0';
        $guzzle = new \GuzzleHttp\Client();
        $url = 'https://login.microsoftonline.com/' . $tenantId . '/oauth2/token?api-version=1.0';
        $token = json_decode($guzzle->post($url, [
            'form_params' => [
                'client_id' => $clientId,
                'client_secret' => $clientSecret,
                'resource' => 'https://graph.microsoft.com/',
                'grant_type' => 'client_credentials',
            ],
        ])->getBody()->getContents());
        $this->accessToken = $token->access_token;
        $this->graph = new Graph();
        $this->graph->setAccessToken($this->accessToken);

    }

    public function testExample()
    {

        $users = $this->getUserList();
//        var_dump($users);
        $this->assertTrue(true);
    }

    /**
     * @param $accessToken
     * @return mixed
     * @throws \Microsoft\Graph\Exception\GraphException
     */
    private function getUserList(): array
    {
        echo "- getUserList\n";
        $users = $this->graph->createRequest("GET", "/users")
            ->setReturnType(User::class)
            ->execute();
        $this->assertNotNull($users);
        return $users;
    }

    public function testGetUser()
    {
        echo "- testGetUser\n";
        $userId = "stephanie_runolfsson@naljp.onmicrosoft.com";
        $user = $this->getUserDetail($userId);
        var_dump($user);
        $this->assertNotNull($user->getUserPrincipalName());
    }

    public function testCreateUser()
    {
        echo "- testCreateUser\n";
        for($i=0;$i<1;$i++){
            $newUser = $this->createUserObject();
            $this->graph->createRequest("POST", "/users")
                ->attachBody($newUser)
                ->execute();

            //Get back to test
            $userCreated = $this->graph->createRequest("GET", "/users/".$newUser->getUserPrincipalName())->setReturnType(User::class)
                ->execute();
            //Check they're having same UserPrincipalName
            $newUserPrincipalName = $newUser->getUserPrincipalName();
            $createdPrincipalName = $userCreated->getUserPrincipalName();
            $this->assertEquals($newUserPrincipalName, $createdPrincipalName);
        }
    }

    /**
     * @return User
     */
    private function createUserObject(): User
    {
        $faker = Factory::create();

        $userJson = Config::get('GraphAPISchemas.createUserJson');
        $newUser = new User(json_decode($userJson, true));
        $newUser->setDisplayName($faker->name);
        $userName = 'faker_' . $faker->userName;
        //        Required attributes
        $newUser->setGivenName($userName);
        $newUser->setMailNickname($userName);
        $newUser->setUserPrincipalName("$userName@naljp.onmicrosoft.com");
        //        Optional attributes
        $newUser->setCountry($faker->country);
        $newUser->setMobilePhone($faker->phoneNumber);
        $newUser->setStreetAddress($faker->streetAddress);
        return $newUser;
    }

/*    public function testDeleteAllUser(){
        $users = $this->getUserList();
        foreach ($users as $user){
            $userPrincipalName = $user->getUserPrincipalName();
            if (strpos($userPrincipalName, 'tuanla') !== false) {
                echo "Do nothing on user: $userPrincipalName\n";
            }
            $this->deleteUser($userPrincipalName);
            echo "Delete user: $userPrincipalName!\n";
        }
//
    }*/

    /**
     * @param string $userId
     * @return mixed
     */
    private function getUserDetail(string $userId)
    {
        $user = $this->graph->createRequest("GET", "/users/{$userId}")
            ->setReturnType(User::class)
            ->execute();
        return $user;
    }

    /**
     * @param $userPrincipalName
     */
    private function deleteUser($userPrincipalName): void
    {
        $userDeleted = $this->graph->createRequest("DELETE", "/users/" . $userPrincipalName)
            ->setReturnType(User::class)
            ->execute();
    }



}
