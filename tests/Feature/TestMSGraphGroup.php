<?php

namespace Tests\Feature;

use Faker\Factory;
use Illuminate\Support\Facades\Config;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Model\Group;
use Microsoft\Graph\Model\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TestMSGraphGroup extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    private $accessToken;
    private $graph;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $tenantId = 'd40093bb-a186-4f71-8331-36cca3f165f8';
        $clientId = 'eb827075-42c3-4d23-8df0-ec135b46b5a6';
//        $clientSecret = 'BtnF@kN3.?k.HA3raQBMasXiVOM3dNN0';
        $clientSecret = '7F_H5U1lChS.TO?4dRo/KW6/kPC7ezFw';
        $guzzle = new \GuzzleHttp\Client();
        $url = 'https://login.microsoftonline.com/' . $tenantId . '/oauth2/token?api-version=1.0';
        $token = json_decode($guzzle->post($url, [
            'form_params' => [
                'client_id' => $clientId,
                'client_secret' => $clientSecret,
                'resource' => 'https://graph.microsoft.com/',
                'grant_type' => 'client_credentials',
            ],
        ])->getBody()->getContents());
        echo "$token->access_token\n";

        $this->accessToken = $token->access_token;
        $this->graph = new Graph();
        $this->graph->setAccessToken($this->accessToken);

    }

    public function testGetGroupsList(): array
    {

        $groups = $this->graph->createRequest("GET", "/groups")
            ->setReturnType(Group::class)
            ->execute();
        $this->assertNotNull($groups);
        var_dump($groups);
        return $groups;
    }

    public function testGetGroupDetails()
    {
        $group = $this->graph->createRequest("GET", "/groups/g1")->setReturnType(Group::class);
        var_dump($group);
        $this->assertNotNull($group);
    }

    public function testCreateGroup()
    {
        $newGroup = $this->createGroupObject();
        var_dump($newGroup);
        try{
            $group = $this->graph->createRequest("POST", "/groups")
                ->attachBody($newGroup)
                ->setReturnType(Group::class)
                ->execute();
            var_dump($group);
            $this->assertIsObject($group);
        }
        catch (\Exception $exception){
            var_dump($exception->getMessage());
            return;
        }


        //Get back to test
        $detailGroupURL = "/groups/" . $group->getId();
        $groupCreated = $this->graph->createRequest("GET", $detailGroupURL)
            ->setReturnType(Group::class)
            ->execute();
        //Check they're having same
        $mailNicknameOfData = $newGroup->getMailNickname();
        $mailNicknameOfRealGroup = $groupCreated->getMailNickname();
        $this->assertEquals($mailNicknameOfData, $mailNicknameOfRealGroup);

    }

    private function createGroupObject(): Group
    {
        $faker = Factory::create();

        $userJson = Config::get('GraphAPISchemas.createGroupJson');
        $userArray = json_decode($userJson, true);
        $newGroup = new Group();
//        $newGroup = new Group(json_decode($userJson, true));
        $groupName = 'faker_' . $faker->word;
        //        Required attributes
        $newGroup->setDisplayName("display: $groupName");
        $newGroup->setDescription("description: $groupName");
        $newGroup->setMailNickname($groupName);
        $newGroup->setMailEnabled(false);
        $newGroup->setGroupTypes(['Unified']);
        $newGroup->setSecurityEnabled(false);
        //        Optional attributes

        return $newGroup;
    }

}
