<?php

namespace Tests\Feature;

use Faker\Factory;
use Illuminate\Support\Facades\Config;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Model\Group;
use Microsoft\Graph\Model\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TestMSGraphGroup extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    private $accessToken;
    private $graph;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $tenantId = 'd40093bb-a186-4f71-8331-36cca3f165f8';
        $clientId = 'eb827075-42c3-4d23-8df0-ec135b46b5a6';
//        $clientSecret = 'BtnF@kN3.?k.HA3raQBMasXiVOM3dNN0';
        $clientSecret = '7F_H5U1lChS.TO?4dRo/KW6/kPC7ezFw';
        $guzzle = new \GuzzleHttp\Client();
        $url = 'https://login.microsoftonline.com/' . $tenantId . '/oauth2/token?api-version=1.0';
        $token = json_decode($guzzle->post($url, [
            'form_params' => [
                'client_id' => $clientId,
                'client_secret' => $clientSecret,
                'resource' => 'https://graph.microsoft.com/',
                'grant_type' => 'client_credentials',
            ],
        ])->getBody()->getContents());
        echo "$token->access_token\n";

        $this->accessToken = $token->access_token;
        $this->graph = new Graph();
        $this->graph->setAccessToken($this->accessToken);

    }

    public function testGetGroupsList(): array
    {

        $groups = $this->graph->createRequest("GET", "/groups")
            ->setReturnType(Group::class)
            ->execute();
        $this->assertNotNull($groups);
//        var_dump($groups);
        if (!is_array($groups))
            return [$groups];
        return $groups;
    }

    public function testGetGroupDetails()
    {
        $group = $this->graph->createRequest("GET", "/groups/aa9e43c9-afc5-4288-ba86-17e5068fe1dd")
            ->setReturnType(Group::class)
            ->execute();
//        var_dump($group->getMembers());
        var_dump($group->getMembers());
        $this->assertNotNull($group);
    }

    public function testCreateGroup()
    {
        $newGroup = $this->createGroupObject();
        var_dump($newGroup);
        try {
            $group = $this->graph->createRequest("POST", "/groups")
                ->attachBody($newGroup)
                ->setReturnType(Group::class)
                ->execute();
            var_dump($group);
            $this->assertIsObject($group);
        } catch (\Exception $exception) {
            var_dump($exception->getMessage());
            return;
        }


        //Get back to test
        $detailGroupURL = "/groups/" . $group->getId();
        $groupCreated = $this->graph->createRequest("GET", $detailGroupURL)
            ->setReturnType(Group::class)
            ->execute();
        //Check they're having same
        $mailNicknameOfData = $newGroup->getMailNickname();
        $mailNicknameOfRealGroup = $groupCreated->getMailNickname();
        $this->assertEquals($mailNicknameOfData, $mailNicknameOfRealGroup);

    }

    private function createGroupObject(): Group
    {
        $faker = Factory::create();

        $userJson = Config::get('GraphAPISchemas.createGroupJson');
        $userArray = json_decode($userJson, true);
        $newGroup = new Group();
//        $newGroup = new Group(json_decode($userJson, true));
        $groupName = 'faker_' . $faker->word;
        //        Required attributes
        $newGroup->setDisplayName("display: $groupName");
        $newGroup->setDescription("description: $groupName");
        $newGroup->setMailNickname($groupName);
        $newGroup->setMailEnabled(false);
        $newGroup->setGroupTypes(['Unified']);
        $newGroup->setSecurityEnabled(false);
        //        Optional attributes

        return $newGroup;
    }

    public function testDeleteGroup()
    {
        $groupId = '66b663ee-f0a5-41c5-b302-2a727781221f';

        $group = $this->graph->createRequest("GET", "/groups/$groupId")->setReturnType(Group::class);
        var_dump($group);
        $this->deleteGroup($groupId);
        $groupAfterDeleted = $this->graph->createRequest("GET", "/groups/$groupId")->setReturnType(Group::class);
        var_dump($groupAfterDeleted);

    }

    private function deleteGroup($groupId): void
    {
        $userDeleted = $this->graph->createRequest("DELETE", "/groups/" . $groupId)
            ->setReturnType(User::class)
            ->execute();
    }

    public function testAddMembers()
    {
//        $groupId = 'aa9e43c9-afc5-4288-ba86-17e5068fe1dd';
//        $groupId = '2c8a80f1-b967-411c-a3f7-230773629552';
        $groupId = '6ddc9131-822e-4291-8bb4-89bade36e991';
        $uPCN = 'faker_skuvalis@naljp.onmicrosoft.com';
        $this->addMemberToGroup($uPCN, $groupId);
        $membersList = $this->getMemberListOfGroupId($groupId);
        var_dump($membersList);
    }

    /**
     * @param string $uPCN
     * @param string $groupId
     */
    private function addMemberToGroup(string $uPCN, string $groupId): void
    {
        $body = json_decode('{"@odata.id": "https://graph.microsoft.com/v1.0/users/' . $uPCN . '"}', true);
        $response = $this->graph->createRequest("POST", "/groups/$groupId/members/\$ref")
            ->attachBody($body)
            ->setReturnType("GuzzleHttp\Psr7\Stream")
            ->execute();
        echo "add member to group: $uPCN\n\n";
        var_dump($response);
        echo "-------";
    }

    /**
     * @param string $groupId
     * @return mixed
     */
    private function getMemberListOfGroupId(string $groupId)
    {
        echo 'getMemberListOfGroup\n';
        $membersList = $this->graph->createRequest("GET", "/groups/$groupId/members/")
            ->setReturnType(User::class)
            ->execute();
        return $membersList;
    }

    public function testRemoveMemberOfGroup()
    {
        $groupId = '6ddc9131-822e-4291-8bb4-89bade36e991';
        $uPCN = 'faker_skuvalis@naljp.onmicrosoft.com';
        $userId = 'f4532ebd-0183-422b-b0df-e0a2ea324a32';

        $membersList = $this->getMemberListOfGroupId($groupId);
        var_dump($membersList);
        $response = $this->graph->createRequest("DELETE", "/groups/$groupId/members/$userId/\$ref")
            ->setReturnType("GuzzleHttp\Psr7\Stream")
            ->execute();
        echo "\n\nCheck members list again\n\n";
        var_dump($this->getMemberListOfGroupId($groupId));
        dd($response);
    }

    public function testDeleteAllGroups()
    {
        $groups = $this->testGetGroupsList();
        foreach ($groups as $group) {
            $groupId = $group->getId();
            if ((strpos($groupId, 'tuanla') !== false) || (strpos($groupId, 'plids') !== false)) {
                echo "Do nothing on group: $groupId\n";
                continue;
            } elseif ($groupId) {
                $this->deleteGroup($groupId);
                echo "Delete group: $groupId!\n";
            }
        }
    }

}
