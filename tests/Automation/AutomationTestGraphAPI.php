<?php

namespace Tests\Automation;

use App\Ldaplibs\UserGraphAPI;
use Microsoft\Graph\Graph;
use Microsoft\Graph\Model\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;


class AutomationTestGraphAPI extends TestCase
{
    const DATA_TEST_FLOWS = 'data_test/graph_flows';
    /**
     * A basic feature test example.
     *
     * @return void
     */
    private $accessToken;
    private $graph;
    private $graphUser;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $tenantId = 'd40093bb-a186-4f71-8331-36cca3f165f8';
        $clientId = 'eb827075-42c3-4d23-8df0-ec135b46b5a6';
        $clientSecret = 'BtnF@kN3.?k.HA3raQBMasXiVOM3dNN0';
        $guzzle = new \GuzzleHttp\Client();
        $url = 'https://login.microsoftonline.com/' . $tenantId . '/oauth2/token?api-version=1.0';
        $token = json_decode($guzzle->post($url, [
            'form_params' => [
                'client_id' => $clientId,
                'client_secret' => $clientSecret,
                'resource' => 'https://graph.microsoft.com/',
                'grant_type' => 'client_credentials',
            ],
        ])->getBody()->getContents());
        $this->accessToken = $token->access_token;
        $this->graph = new Graph();
        $this->graph->setAccessToken($this->accessToken);
        $this->graphUser = new UserGraphAPI();
    }

    public function deleteAllUser()
    {
        $users = $this->getUserList();
        foreach ($users as $user) {
            $userPrincipalName = $user->getUserPrincipalName();
            if ((strpos($userPrincipalName, 'tuanla') !== false) || (strpos($userPrincipalName, 'plids') !== false)) {
                echo "Do nothing on user: $userPrincipalName\n";
                continue;
            }
            $this->graphUser->deleteUser($userPrincipalName);
            echo "Delete user: $userPrincipalName!\n";
        }
//
    }

    private function getUserList(): array
    {
        echo "- getUserList\n";
        $users = $this->graph->createRequest("GET", "/users")
            ->setReturnType(User::class)
            ->execute();
        $this->assertNotNull($users);
        return $users;
    }

    public function testExample()
    {
//        $response = $this->get('/');
        $this->deleteAllUser();
//        var_dump($this->getUserList());
//        $response->assertStatus(200);
        $baseDirectory = storage_path(self::DATA_TEST_FLOWS);
        $directories = getDirectories($baseDirectory);
        $this->testCreateUsers("$baseDirectory/step1");

    }

    public function testCreateUsers(string $flowDirectory): void
    {
        $allFiles = getFiles("$flowDirectory/requests");
        foreach ($allFiles as $fileName) {
            $inputUserData = json_decode(file_get_contents("$flowDirectory/requests/$fileName"), true);
            $expectedResponse = json_decode(file_get_contents("$flowDirectory/responses/$fileName"), true);

            echo("Creating user from file: $fileName\n");
            $userCreated = $this->graphUser->createUser($inputUserData);

            $this->assertTrue($expectedResponse['userPrincipalName']== $userCreated->getUserPrincipalName());
            echo "\n";
        }
    }

}
